source = read.csv('Data.csv')
setwd("~/MachineLearning/Simple Linear Regression")
library(readr)
Data <- read_csv("Data.csv")
View(Data)
source('~/.active-rstudio-document', echo=TRUE)
View(source)
source = read.csv('Data.csv')
source = read.csv('Data.csv')
#Import Dataset
source = read.csv('Data.csv')
#Update Missing Data
source$Age = ifelse(is.na(source$Age),
ave(source$Age, FUN = function(x) mean(x, na.rm = TRUE)),
source$Age)
source$Salary = ifelse( is.na(source$Salary),
ave(source$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
source$Salary)
#Encode Categorical Data
source$Country = factor(source$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(0, 1, 2)
)
View(source)
View(source)
source$Purchased = factor(source$Purchased,
levels = c('France', 'Spain', 'Germany'),
labels = c(0, 1, 2))
source$Purchased = factor(source$Purchased,
levels = c('Yes', 'No'),
labels = c(1,0))
source('~/.active-rstudio-document', echo=TRUE)
librar(caTools)
split = sample.split( source$, 0.75)
trainingSet = subset(source, split == TRUE)
testSet = subset(source, split == FALSE)
library(caTools)
split = sample.split( source$, 0.75)
trainingSet = subset(source, split == TRUE)
testSet = subset(source, split == FALSE)
split = sample.split( source$Purchased, SplitRatio= 0.75)
trainingSet = subset(source, split == TRUE)
testSet = subset(source, split == FALSE)
trainingSet = scale(trainingSet)
testSet = scale(testSet)
trainingSet = scale(trainingSet)
source('~/.active-rstudio-document', echo=TRUE)
trainingSet = scale(trainingSet)
source('~/.active-rstudio-document', echo=TRUE)
trainingSet = scale(trainingSet)
testSet = scale(testSet)
View(testSet)
View(testSet)
View(trainingSet)
View(trainingSet)
trainingSet = scale(trainingSet)
testSet = scale(testSet)
trainingSet = scale(trainingSet)
testSet = scale(testSet)
View(trainingSet)
View(testSet)
#Feature Scaling
trainingSet[:, 2:3] = scale(trainingSet[:, 2:3])
testSet[:, 2:3] = scale(testSet[:, 2:3])
#Feature Scaling
trainingSet[, 2:3] = scale(trainingSet[, 2:3])
testSet[, 2:3] = scale(testSet[, 2:3])
source = read_csv('Salary_Data.csv')
source = read.csv('Salary_Data.csv')
View(source)
View(source)
View(source)
View(source)
#Import Dataset
source = read.csv('Salary_Data.csv')
#Split Train/Test data
#install.packages('caTools')
#library('caTools')
split = sample.split(source$Salary, SplitRatio = 0.25)
trainingSet = subs(source, split == TRUE)
testSet = subs(source, split == FALSE)
trainingSet = subset(source, split == TRUE)
testSet = subset(source, split == FALSE)
View(testSet)
View(trainingSet)
trainingSet[,1] = scale(trainingSet[,1] )
testSet[,1] = scale(testSet[,1] )
View(testSet)
View(source)
model = lm(formula = Salary ~ YearsExperience, data = trainingSet )
model
summary(model)
#Prediction
prediction = predict(model, newdata = testSet)
prediction
library('caTools')
library('ggplot2')
library('ggplot2')
ggplot()+
geom_point( aes(x= trainingSet$YearsExperience, y = trainingSet$Salary), colour ='red') +
geom_l(aes(x=trainingSet$YearsExperience,y=predict(model, newdata = trainingSet)), colour = 'green') +
ggtitle('Salary estimation based on experience')+
xlab('Experience')+
ylab('Salary')
ggplot()+
geom_point( aes(x= trainingSet$YearsExperience, y = trainingSet$Salary), colour ='red') +
geom_line(aes(x=trainingSet$YearsExperience,y=predict(model, newdata = trainingSet)), colour = 'green') +
ggtitle('Salary estimation based on experience')+
xlab('Experience')+
ylab('Salary')
#Import Dataset
source = read.csv('Salary_Data.csv')
#Split Train/Test data
#install.packages('caTools')
#library('caTools')
split = sample.split(source$Salary, SplitRatio = 0.75)
trainingSet = subset(source, split == TRUE)
testSet = subset(source, split == FALSE)
#Feature Scaling
trainingSet[,1] = scale(trainingSet[,1] )
testSet[,1] = scale(testSet[,1] )
#Linear Regression
model = lm(formula = Salary ~ YearsExperience, data = trainingSet )
#Prediction
prediction = predict(model, newdata = testSet)
#Visualization
#install.packages('ggplot2')
library('ggplot2')
ggplot()+
geom_point( aes(x= trainingSet$YearsExperience, y = trainingSet$Salary), colour ='red') +
geom_line(aes(x=trainingSet$YearsExperience,y=predict(model, newdata = trainingSet)), colour = 'green') +
ggtitle('Salary estimation based on experience')+
xlab('Experience')+
ylab('Salary')
